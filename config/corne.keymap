#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        browsertab: browsertab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    combos {
        compatible = "zmk,combos";

        leftbrack {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        rightbrack {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 32>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        Alpha {
            display-name = "Alpha";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp TAB         &kp Q               &kp W  &kp E         &kp R         &kp T          &kp Y       &kp U      &kp I      &kp O    &kp P     &kp BACKSPACE
&kp CAPSLOCK    &kp A               &kp S  &kp D         &kp F         &kp G          &kp H       &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &mt LEFT_CONTROL Z  &kp X  &kp C         &kp V         &kp B          &kp N       &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp GRAVE
                                           &kp LEFT_ALT  &kp LEFT_GUI  &lt 1 SPACE    &mt F8 RET  &kp MINUS  &kp EQUAL
            >;
        };

        Numeric {
            display-name = "Numeric";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&trans  &kp N1          &kp N2          &kp N3          &kp N4           &kp N5           &kp N6             &kp N7            &kp N8           &kp N9          &kp N0        &trans
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &kp BACKSPACE    &kp K_VOLUME_UP    &kp K_PLAY_PAUSE  &trans           &trans          &trans        &kp DELETE
&trans  &trans          &trans          &trans          &trans           &kp RETURN       &kp C_VOLUME_DOWN  &kp K_MUTE        &kp LEFT_ARROW   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW
                                        &studio_unlock  &trans           &trans           &tog 2             &kp LEFT_BRACE    &kp RIGHT_BRACE
            >;
        };

        Function {
            display-name = "Function";
            bindings = <
&trans  &kp F1   &kp F2   &kp F3        &kp F4        &kp F5            &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &trans
&trans  &kp F6   &kp F7   &kp F8        &kp F9        &kp F10           &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &trans
&trans  &kp F11  &kp F12  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_CLR_ALL    &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER  &trans
                          &trans        &trans        &trans            &trans  &kp KP_NUMBER_0  &kp KP_DOT
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        l3 {
            if-layers = <1 2>;
            then-layer = <2>;
        };
    };
};
